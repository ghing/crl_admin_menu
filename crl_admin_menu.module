<?php

define('CRL_MENU_BASE_WEIGHT', -100);

/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function crl_admin_menu_help($path, $arg) {
  $output = '';  //declare your output variable
  switch ($path) {
    case "admin/help#crl_admin_menu":
      $output = '<p>'.  t("Alters the default menu items of the menus produced by the Administration Menu module to better suit the needs of admins and editors of the CRL website") .'</p>';
      break;
  }
  return $output;
} // function crl_admin_menu_help

/**
* Implementation of hook_menu().
*/
function crl_admin_menu_menu() {
  // Dummy menu item so we can place things below it in the admin menu
/*  $items['crl_admin_menu'] = array(*/
    //'title' => 'CRL Website Administration',
    //'page callback' => 'drupal_goto',
    //'page arguments' => array('<front>'),
    //'access callback' => 'user_access',
    //'access arguments' => array('access administration menu'), 
  /*);*/


  // Create proxy menu items for the create content menu items so we can place 
  // these under our CRL menu items.
  // We do this because we also want the items to show up in the default 
  // location for administrators.
  $items['crl_admin_menu/node/add'] = array(
    'title' => 'Create Content',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/add'),
    'access callback' => 'user_access',
    'access arguments' => array('create page content'), 
    'weight' => 1,
  );

  foreach (node_get_types('types', NULL, TRUE) as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['crl_admin_menu/node/add/'. $type_url_str] = array(
      'title' => drupal_ucfirst($type->name),
      'title callback' => 'check_plain',
      'page callback' => 'drupal_goto',
      'page arguments' => array('node/add/' . $type_url_str),
      'access callback' => 'node_access',
      'access arguments' => array('create', $type->type),
      'description' => $type->description,
    );
  }

  return $items;
}


/**

* Implementation of hook_menu_alter
*
* @param items Associative array of menu router definitions returned from hook_menu().
*/
function crl_admin_menu_menu_alter(&$items) {
  // @todo Implement this function if we want to modify any of the default 
  // items.  
} // function crl_admin_menu_menu_alter

/**
 * Implementation of hook_admin_menu().
 *
 * @param &$deleted
 *   Array of links under admin/* that were removed by admin_menu_adjust_items().
 *   If one of these links is added back, it should be removed from the array.
 *
 * @return Array of items to be added to the admin menu 
 */
function crl_admin_menu_admin_menu(&$deleted) {
  $links = array();
  $icon_path = '<front>';

  $links[] = array(
    'title' => 'Toggle Theme developer',
    'path' => 'devel/devel_themer',
    'weight' => 89,
    'parent_path' => $icon_path,
    'options' => array(
      'query' => drupal_get_destination(),
    ),
  );


  // Place our dummy menu at the root of the admin menu
/*  $links[] = array(*/
    //'title' => 'CRL Website Administration',
    //'path' => 'crl_admin_menu',
    //'weight' => CRL_MENU_BASE_WEIGHT,
    //'parent_path' => '<root>',
  /*);  */

  // Make links to our content status views
  $links[] = array(
    'title' => 'Content Status',
    'path' => 'status',
    'weight' => CRL_MENU_BASE_WEIGHT,
    //'parent_path' => 'crl_admin_menu',
    'parent_path' => '<root>',
  );

  $links[] = array(
    'title' => 'My Content Status',
    'path' => 'status/@username', 
    'weight' => 0,
    'parent_path' => 'status',
    // Note: @username is dynamically replaced by default, we just invoke
    // replacement by setting the 'tp' key here.
    'options' => array('extra class' => 'crl-admin-menu-action', 'tp' => array()),
  );

  // Place our proxy node/add menus in the admin menu
  $links[] = array(
    'title' => 'Create Content',
    'path' => 'crl_admin_menu/node/add',
    'weight' => CRL_MENU_BASE_WEIGHT + 1,
    //'parent_path' => 'crl_admin_menu',
    'parent_path' => '<root>',
    );

  foreach (crl_admin_menu_menu() as $path => $item) {
    if (strpos($path, 'node/add/') !== FALSE) {
      $links[] = array(
        'title' => $item['title'],
        'path' => $path,
        'parent_path' => 'crl_admin_menu/node/add',
        );
    }
  }

  // Place a link to our handbook in the admin menu
  $links[] = array(
    'title' => 'Handbook',
    //'path' => 'handbook',
    'path' => 'node/6122',
    'weight' => CRL_MENU_BASE_WEIGHT + 2,
    'parent_path' => '<root>',
    );
  
  return $links;
} // function crl_admin_menu_admin_menu

/**
 * Implementation of hook_admin_menu_replacements().
 *
 * This is invoked from admin_menu_init().  We can probably set the CSS
 * classes in crl_admin_menu_admin_menu(). 
 */
function crl_admin_menu_admin_menu_replacements() {
  $items = array();  
 
  // @todo: Add CSS selectors of items that will get replaced dynamically
  // by Javascript e.g.:
  //if ($user_count = admin_menu_get_user_count()) {
    //$items['.admin-menu-users a'] = $user_count;
  //}
  // These eventually get added to rendered pages and then the content is
  // dynamically replaced by routines in admin_menu.js.

  return $items;
}

/**
 * Implementation of hook_translated_menu_link_alter().
 *
 * Here is where we make changes to links that need dynamic information such
 * as the current page path or the number of users.
 */
function crl_admin_menu_translated_menu_link_alter(&$item, $map) {
  //print("crl_admin_menu_translated_menu_link_alter(): entering function");
  global $user;

  if ($item['menu_name'] != 'admin_menu') {
    return;
  }

  if (isset($item['options']['tp'])) {
    $item['href'] = t($item['href'], array('@username' => $user->name));
  }
}
